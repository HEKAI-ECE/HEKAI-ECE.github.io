<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《EfficientC++》读书笔记（二）</title>
    <link href="/2021/12/02/%E3%80%8AEfficientC++%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/12/02/%E3%80%8AEfficientC++%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>构造函数与析构函数<br><span id="more"></span></p><h2 id="构造函数与析构函数-Constructor-amp-Destructor"><a href="#构造函数与析构函数-Constructor-amp-Destructor" class="headerlink" title="构造函数与析构函数 Constructor &amp; Destructor"></a>构造函数与析构函数 Constructor &amp; Destructor</h2><h2 id="虚函数-Virtual-Function"><a href="#虚函数-Virtual-Function" class="headerlink" title="虚函数 Virtual Function"></a>虚函数 Virtual Function</h2><h2 id="返回值优化-Return-Value"><a href="#返回值优化-Return-Value" class="headerlink" title="返回值优化 Return Value"></a>返回值优化 Return Value</h2><h2 id="临时对象-Temporary-Object"><a href="#临时对象-Temporary-Object" class="headerlink" title="临时对象 Temporary Object"></a>临时对象 Temporary Object</h2><h2 id="内存管理-Memory-Management"><a href="#内存管理-Memory-Management" class="headerlink" title="内存管理 Memory Management"></a>内存管理 Memory Management</h2><h2 id="多线程-MultiThreading"><a href="#多线程-MultiThreading" class="headerlink" title="多线程 MultiThreading"></a>多线程 MultiThreading</h2><h2 id="内联-Inline"><a href="#内联-Inline" class="headerlink" title="内联 Inline"></a>内联 Inline</h2><h2 id="标准模板库-STL"><a href="#标准模板库-STL" class="headerlink" title="标准模板库 STL"></a>标准模板库 STL</h2><h2 id="引用计数-Reference-Count"><a href="#引用计数-Reference-Count" class="headerlink" title="引用计数 Reference Count"></a>引用计数 Reference Count</h2><h2 id="编码优化"><a href="#编码优化" class="headerlink" title="编码优化"></a>编码优化</h2><h2 id="设计优化"><a href="#设计优化" class="headerlink" title="设计优化"></a>设计优化</h2>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《EfficientC++》读书笔记（一）</title>
    <link href="/2021/12/01/%E3%80%8AEfficientC++%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/12/01/%E3%80%8AEfficientC++%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>软件运行效率包含设计效率与编码效率。<br>设计效率主要涉及算法与数据结构、程序层次与函数分解。<br>编码效率可分解为语言结构、系统体系结构、库、编译器优化。<br><span id="more"></span><br>C与C++在编译器翻译时的区别<br>C线性，C++非线性<br>C++编译器可能将代码插入到程序执行流中</p><p>性能的释义：时间效率。<br>通常以响应时间，吞吐量来衡量。<br>步长与指令数均代表代码段所产生的汇编语言指令数量。</p><h2 id="跟踪-Trace"><a href="#跟踪-Trace" class="headerlink" title="跟踪 Trace"></a>跟踪 Trace</h2><p>简易的跟踪方法：定义一个简单的Trace类，实现信息打印至日志文件中。<br>在每个想要跟踪的函数中定义该Trace类对象，在函数入口或出口写一些信息。跟踪可以减少或避免调试器的使用。</p><h3 id="跟踪调用嵌入ifdef代码块"><a href="#跟踪调用嵌入ifdef代码块" class="headerlink" title="跟踪调用嵌入ifdef代码块"></a>跟踪调用嵌入ifdef代码块</h3><p>例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> TRACE</span><br><span class="hljs-function">Trace <span class="hljs-title">t</span><span class="hljs-params">(<span class="hljs-string">&quot;myFunction&quot;</span>)</span></span>; <span class="hljs-comment">//以一个函数名为参数的构造函数</span><br>t.<span class="hljs-built_in">debug</span>(<span class="hljs-string">&quot;print some message&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure></p><p>此方法在未开启时完全没有性能开销。<br>但缺点是开启或关闭跟踪必须修改源代码并重新编译。如果程序交付后出现问题，客户或修理工程师将无法打开跟踪查找问题。</p><h3 id="条件开启跟踪"><a href="#条件开启跟踪" class="headerlink" title="条件开启跟踪"></a>条件开启跟踪</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Trace</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Trace</span> (<span class="hljs-keyword">const</span> string &amp;name);<br>~<span class="hljs-built_in">Trace</span> ();<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">debug</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp;msg)</span></span>;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> traceIsActive = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">private</span>:<br>string theFuctionName;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span></span><br><span class="hljs-function"><span class="hljs-title">Trace::Trace</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp;name)</span>: theFunctionName(name) &#123;</span> <span class="hljs-comment">//将函数名保存到私有string</span><br><span class="hljs-keyword">if</span>(traceIsActive)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;enter function : &quot;</span> &lt;&lt; name &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Trace::debug</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp;msg)</span></span>&#123;<br><span class="hljs-keyword">if</span>(traceIsActive)&#123;<br>cout &lt;&lt; msg &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">inline</span><br><span class="hljs-keyword">void</span> Trace::~<span class="hljs-built_in">Trace</span>()&#123;<br><span class="hljs-keyword">if</span>(traceIsActive)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;exit function :&quot;</span> &lt;&lt; theFunctionName &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用Trace类：<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> myFunction(<span class="hljs-type">int</span> x)&#123;<br>string <span class="hljs-type">name</span> = &quot;myFunction&quot;;<br>Trace t(<span class="hljs-type">name</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">......</span><br><span class="hljs-comment">*/</span><br>string <span class="hljs-keyword">info</span> = &quot;some important info&quot;;<br>t.<span class="hljs-keyword">debug</span>(<span class="hljs-keyword">info</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">......</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>在上述代码中，对Trace对象最低限度的使用就是把进入函数和离开函数记录到日志中。<br>即使traceIsActive被关闭的情况下，也发生了以下一系列操作：<br>·创建string对象name<br>·调用Trace构造函数<br>·Trace构造函数调用创建string对象theFunctionName</p><p>函数结束时：<br>·销毁string对象name<br>·调用Trace析构函数<br>·Trace析构函数销毁string对象theFunctionName</p><p>这些不必要的创建和销毁可能带来不能承受的性能代价。如果myFunction()本身什么也不做，上述操作将使代码速度下降60倍。<br>当然，如果myFunction本身执行了相当多操作，那么Trace增加的性能影响将被摊还。这也侧面说明，Trace对象不应该被添加到小型、频繁执行的函数中，与内联恰好相反。</p><h3 id="const-char-代替-string"><a href="#const-char-代替-string" class="headerlink" title="const char * 代替 string"></a>const char * 代替 string</h3><p>紧接上述代码，只要使用const char* 代替 string，就可以大幅降低性能开销。<br>这种替换的本质是减少无条件的对象创建。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Trace</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Trace</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name);<br>~<span class="hljs-built_in">Trace</span> ();<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">debug</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp;msg)</span></span>;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> traceIsActive = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">private</span>:<br>string *theFuctionName;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span></span><br><span class="hljs-function"><span class="hljs-title">Trace::Trace</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name)</span>: theFunctionName(<span class="hljs-number">0</span>) &#123;</span><br><span class="hljs-keyword">if</span>(traceIsActive)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;enter function : &quot;</span> &lt;&lt; name &lt;&lt; endl;<br>theFunctionName = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(name); <span class="hljs-comment">//仅当跟踪开启时创建对象</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//debug函数可以维持不变</span><br><br><span class="hljs-keyword">inline</span><br><span class="hljs-keyword">void</span> Trace::~<span class="hljs-built_in">Trace</span>()&#123;<br><span class="hljs-keyword">if</span>(traceIsActive)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;exit function :&quot;</span> &lt;&lt; theFunctionName &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> theFunctionName; <span class="hljs-comment">//注意要删除string指针</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>使用以上方法后，在关闭跟踪时，代码速度降低从原来的60倍变为3倍左右。</p><h3 id="使用跟踪的代价"><a href="#使用跟踪的代价" class="headerlink" title="使用跟踪的代价"></a>使用跟踪的代价</h3><ol><li>I/O的开销是高昂的</li><li>函数调用的开销是需要考虑的。短小、频繁调用的函数应当内联</li><li>复制对象的开销是高昂的。非必要时应使用引用传递，而非值传递</li><li>有条件地创造对象和进行计算。调用构造与析构函数将带来隐性执行</li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客指南</title>
    <link href="/2021/11/30/Hexo%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/"/>
    <url>/2021/11/30/Hexo%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>工作中除了业务外，还需要主动对技术进行思考与挖掘。技术乃开发的立足之本，总结工作和业余的技术要点与思考，对于当下的自己，以后的自己，都是十分必要的。于当下，面向博客式地学习有利于深入理解知识点；于未来，遇到重复的工作和故障时，可以参考过去的技术博客，还可以作为简历的一部分。<br><span id="more"></span><br>Windows环境下搭建基于Hexo框架和Fluid主题的个人博客<br>Set up your personal blog using Hexo Framework and Fluid theme under Windows environment.</p><h2 id="安装文件"><a href="#安装文件" class="headerlink" title="安装文件"></a>安装文件</h2><h3 id="下载并安装-Git"><a href="#下载并安装-Git" class="headerlink" title="下载并安装 Git"></a>下载并安装 Git</h3><p>官方下载地址 <a href="https://git-scm.com/download/win">Git</a><br>镜像下载地址 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝Git镜像</a> </p><h3 id="下载并安装Node-js"><a href="#下载并安装Node-js" class="headerlink" title="下载并安装Node.js"></a>下载并安装Node.js</h3><p>官方下载地址 <a href="https://nodejs.org/en/download/">Nodejs</a><br>镜像下载地址 <a href="https://npm.taobao.org/mirrors/node">淘宝Nodejs镜像</a></p><p>下载并解压后，必须将文件所在路径添加到系统环境变量Path中，才能在命令行中使用node和npm命令。<br>步骤为：控制面板-&gt;搜索-&gt;系统环境变量-&gt;环境变量(N)-&gt;用户变量-&gt;Path-&gt;编辑-&gt;新建-&gt;Node所在路径-&gt;确定</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>打开cmd，先输入<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">--version</span><br></code></pre></td></tr></table></figure><br>出现版本号则说明nodejs安装成功，否则请检查环境变量是否正确添加。</p><p>安装Hexo<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure></p><h2 id="自定义博客"><a href="#自定义博客" class="headerlink" title="自定义博客"></a>自定义博客</h2><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>新建一个存储博客文件的文件夹，如E:\Blog<br>在这个文件夹中打开cmd (于路径框中输入cmd)，输入<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo init<br><span class="hljs-variable">$ </span>npm install<br><span class="hljs-variable">$ </span>hexo s<br></code></pre></td></tr></table></figure><br>访问 <a href="http://localhost:4000/">localhost</a>即可打开博客网站</p><p>更换配置后，建议使用clean清空后再重新启动<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">$ hexo clean <span class="hljs-meta">&amp;&amp; hexo s</span><br></code></pre></td></tr></table></figure></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>这里选择了<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题。</p><p>可以将github源文件解压到/themes路径下，然后将_config.yml创建副本并命名为_config.fluid.yml，并修改指定主题为fluid：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid <span class="hljs-meta"># 指定主题</span><br></code></pre></td></tr></table></figure></p><p>以后如果修改任何主题配置，都只需修改 _config.fluid.yml<br>只要存在于 _config.fluid.yml 的配置都是高优先级，修改原 _config.yml 是无效的。<br>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 _config.fluid.yml 同步修改。<br>想查看覆盖配置有没有生效，可以通过 hexo g —debug 查看命令行输出。<br>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的。</p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>指博客根目录下的_config.fluid.yml<br>开头是# Hexo Configuration<br>可以配置网站标题、副标题、作者、语言、目录地址、时间戳格式、永久链接格式等</p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>指\themes\hexo-theme-fluid-master_config.yml<br>开头是# Hexo Theme Fluid</p><p>所有页面统一字体的字号和字族可以通过主题配置中的下列配置项设置：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">font:</span>  <span class="hljs-meta"># 主题字体配置</span><br><span class="hljs-symbol">  font_size:</span> <span class="hljs-number">16</span>px        <span class="hljs-meta"># 全局字号</span><br><span class="hljs-symbol">  font_family:</span>           <span class="hljs-meta"># 全局字体族，建议默认</span><br><span class="hljs-symbol">  code_font_size:</span> <span class="hljs-number">85</span>%    <span class="hljs-meta"># 代码的字号</span><br></code></pre></td></tr></table></figure></p><h4 id="页头-Header"><a href="#页头-Header" class="headerlink" title="页头 Header"></a>页头 Header</h4><p>导航栏 navbar<br>标题：默认使用博客配置中的 title，这个配置同时控制着网页在浏览器标签中的标题。<br>如需单独区别设置，可在blog_title一栏设置<br>菜单：<br><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas">menu:<br>  - &#123; <span class="hljs-meta">key</span>: <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-meta">link</span>: <span class="hljs-string">&quot;/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>  - &#123; <span class="hljs-meta">key</span>: <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-meta">link</span>: <span class="hljs-string">&quot;/archives/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>  - &#123; <span class="hljs-meta">key</span>: <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-meta">link</span>: <span class="hljs-string">&quot;/categories/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>  - &#123; <span class="hljs-meta">key</span>: <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-meta">link</span>: <span class="hljs-string">&quot;/tags/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>  - &#123; <span class="hljs-meta">key</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-meta">link</span>: <span class="hljs-string">&quot;/about/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br>  #- &#123; <span class="hljs-meta">key</span>: <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-meta">link</span>: <span class="hljs-string">&quot;/links/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><br>key: 用于关联有多语言，如不存在关联则显示 key 本身的值<br>link: 跳转链接<br>icon: 图标的 css class，可以省略（即没有图标），主题内置图标详见这里<br>name: 强制使用此名称显示（不再按多语言显示），可省略</p><p>另外支持二级菜单（下拉菜单），配置写法如下：<br><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sas">menu:<br>  - &#123;<br>      <span class="hljs-meta">key</span>: <span class="hljs-string">&#x27;文档&#x27;</span>,<br>      icon: <span class="hljs-string">&#x27;iconfont icon-books&#x27;</span>,<br>      submenu: [<br>        &#123; <span class="hljs-meta">key</span>: <span class="hljs-string">&#x27;主题博客&#x27;</span>, <span class="hljs-meta">link</span>: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/&#x27;</span> &#125;,<br>        &#123; <span class="hljs-meta">key</span>: <span class="hljs-string">&#x27;配置指南&#x27;</span>, <span class="hljs-meta">link</span>: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/guide/&#x27;</span> &#125;,<br>        &#123; <span class="hljs-meta">key</span>: <span class="hljs-string">&#x27;图标用法&#x27;</span>, <span class="hljs-meta">link</span>: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/icon/&#x27;</span> &#125;<br>      ]<br>  &#125;<br></code></pre></td></tr></table></figure></p><p>其他问题可参考<a href="https://hexo.fluid-dev.com/docs/guide/">官方文档</a></p><h3 id="关于页"><a href="#关于页" class="headerlink" title="关于页"></a>关于页</h3><h3 id="Git-Pages部署"><a href="#Git-Pages部署" class="headerlink" title="Git Pages部署"></a>Git Pages部署</h3><p>安装hexo-deployer-git:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></p><p>在Github创建一个新repo，命名必须为username.github.io<br>编辑_config.yml(或者全局覆盖的_config.fluid.yml)，在Deployment中添加：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/&lt;username&gt;/&lt;project&gt;</span><br>  <span class="hljs-meta"># example, https:<span class="hljs-comment">//github.com/hexojs/hexojs.github.io</span></span><br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure></p><p>注意分支名称，默认可能为master，main，gh-pages等<br>运行<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo deploy </span><br></code></pre></td></tr></table></figure></p><p>可能会遇到Author identity unknown问题，解决方法如下：<br>输入邮箱地址，触发Git Credential Manager<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;you@example.com&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br></code></pre></td></tr></table></figure></p><p>再次运行<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo deploy </span><br></code></pre></td></tr></table></figure></p><p>查看 username.github.io 上的网页是否部署成功。<br>以后本地出现改动时，需再次运行hexo clean &amp;&amp; hexo deploy<br>gitpage可能会对修改有几分钟的延迟</p><p>其他故障可参考<a href="https://hexo.io/zh-cn/docs/github-pages">Hexo github部署</a></p><h2 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h2><h3 id="模板与格式"><a href="#模板与格式" class="headerlink" title="模板与格式"></a>模板与格式</h3><h3 id="变量与函数"><a href="#变量与函数" class="headerlink" title="变量与函数"></a>变量与函数</h3><h3 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h3><p>Hexo渲染LaTeX公式关键<br>Hexo渲染主题的两个重要因素：mathjax和kramed<br>前者是数学公式渲染引擎，后者是Hexo的渲染引擎。<br>hexo默认渲染引擎是marked，但是它不支持mathjax，因此需要替换引擎。</p><h4 id="一、Hexo添加mathjax"><a href="#一、Hexo添加mathjax" class="headerlink" title="一、Hexo添加mathjax"></a>一、Hexo添加mathjax</h4><p>hexo默认安装有hexo-math,需要先卸载它。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">npm uninstall hexo-<span class="hljs-built_in">math</span> <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></p><p>安装mathjax：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-renderer-mathjax <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></p><p>hexo主题配置启用mathjax：<br>编辑_config.yml(或者全局覆盖的_config.fluid.yml)，在最后添加：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># MathJax Support</span><br><span class="hljs-attr">mathjax:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></p><p>hexo博客开启mathjax：</p><p>博客文章的开头加入mathjax:true，具体如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <br><span class="hljs-attr">date:</span> <br><span class="hljs-attr">mathjax:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></p><h4 id="二、hexo切换kramed引擎"><a href="#二、hexo切换kramed引擎" class="headerlink" title="二、hexo切换kramed引擎"></a>二、hexo切换kramed引擎</h4><p>卸载marked引擎:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm uninstall hexo-renderer-marked <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></p><p>安装kramed引擎:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-renderer-kramed <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></p><p>修改引擎bug<br>修改文件/node_modules\kramed\lib\rules\inline.js中escape和em两行，具体修改如下：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">//  escape: /^<span class="hljs-symbol">\\</span>([<span class="hljs-symbol">\\</span>`*&#123;&#125;<span class="hljs-symbol">\[</span><span class="hljs-symbol">\]</span>()#$+<span class="hljs-symbol">\-</span>.!_&gt;])/,<br>  escape: /^<span class="hljs-symbol">\\</span>([`*<span class="hljs-symbol">\[</span><span class="hljs-symbol">\]</span>()#$+<span class="hljs-symbol">\-</span>.!_&gt;])/,<br></code></pre></td></tr></table></figure></p><p>这一步是在原基础上取消了对,{,}的转义(escape)。<br>同时把第20行的em变量也要做相应的修改。<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">//  em: /^<span class="hljs-symbol">\b</span>_((?:__|[<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>])+?)_<span class="hljs-symbol">\b</span>|^<span class="hljs-symbol">\*</span>((?:<span class="hljs-symbol">\*</span><span class="hljs-symbol">\*</span>|[<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>])+?)<span class="hljs-symbol">\*</span>(?!<span class="hljs-symbol">\*</span>)/,<br>  em: /^<span class="hljs-symbol">\*</span>((?:<span class="hljs-symbol">\*</span><span class="hljs-symbol">\*</span>|[<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>])+?)<span class="hljs-symbol">\*</span>(?!<span class="hljs-symbol">\*</span>)/,<br></code></pre></td></tr></table></figure></p><p>重新启动hexo:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo g -d</span><br></code></pre></td></tr></table></figure></p><p>例：</p><p>for $R=\begin{bmatrix}<br>cos\theta &amp; -sin\theta &amp; 0 \\<br>sin\theta &amp; cos\theta &amp; 0 \\<br>0 &amp; 0 &amp; 1<br>\end{bmatrix}$,</p><p>Eigenvalues</p><p>$\lambda_1 = cos(\theta) - i sin(\theta)$</p><p>$\lambda_2 = cos(\theta) + i sin(\theta)$</p><p>$\lambda_3 = 1$</p><p>Eigenvectors $v_1 = (-i, 1, 0)$, $v_2 = (i, 1, 0)$, $v_3 = (0, 0, 1)$</p><p>In terms of eigenvalues and eigenvectors of R, Euler’s theorem (“for every rotation there is a single line in space whose points do not move”) is restated as follows: </p><p>For every rotation R, there is a nonzero vector $\mathbf{v_3}$ where $R\mathbf{v_3} = \mathbf{v_3}$; this is due to the fact that $\mathbf{v_3}$ is an eigenvector of $R$ associated with the eigenvalue 1.</p><p>Git Pages显示Latex公式需要额外配置：<br>在 _config.yml 里添加：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">markdown:</span> kramdown<br></code></pre></td></tr></table></figure></p><p>在需要支持Latex的md文件开头添加：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        MathJax.Hub.Config(&#123;</span><br><span class="javascript">            <span class="hljs-attr">tex2jax</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">skipTags</span>: [<span class="hljs-string">&#x27;script&#x27;</span>, <span class="hljs-string">&#x27;noscript&#x27;</span>, <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;textarea&#x27;</span>, <span class="hljs-string">&#x27;pre&#x27;</span>],</span><br><span class="javascript">            <span class="hljs-attr">inlineMath</span>: [[<span class="hljs-string">&#x27;$&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>]]</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><br>此方法尚未解决问题</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/30/hello-world/"/>
    <url>/2021/11/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
